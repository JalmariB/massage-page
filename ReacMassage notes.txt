********* CMD ASENNUS ********

asentaa rect ja react dom modulit
npm install react react-dom --save

k‰‰nt‰‰ react ja jsx ---> javascriptiksi
npm install babel-core babel-loader babel-preset-es2015 babel-preset-react --save-dev

asentaa webpackin
npm install webpack webpack-dev-server --save-dev

asentaa routerin
npm install react-router --save



asentaa kaiken start ja buil komennot samassa
npm start



********* REACT MUISTIINPANOT ********





***PROPS***
T‰ll‰ voidaan jakaa dynaamisesti dataa elementeille, eli antaa niille property. Props lyhenne juuri propertyst‰, eli elementeille passataan property. 

var testiObjekti = {
	nimi: 'Janne',
	age: '31'

}



...
<div>
	<h1>{this.props.title}</h1> <---lis‰t‰‰n property elementtiin
	<div>{this.props.objekti.nimi}</div> <--- lis‰t‰‰n objektin property
</div>


ReactDOM.render(<CustomerForm title="Customer Form" objekti={janne}/>, document.getElementById('form-container'));




***STATE***
m‰‰ritell‰‰n aplicationin state/tila miss‰ se on kun se avataan, mit‰ dataa se pit‰‰ sis‰ll‰‰n sillon.
Voidaan k‰ytt‰‰ esimerkiksi siihen ett‰ nested componentteihin passataan dataa. 
Jolloin voidaan esimerkiksi vain listan arvoja muuttamalla siirt‰‰ kaikkiin nested componentteihin datat.


getInitialState: function () {
	return {
		esimObjekti: ['janne', 'matti', 'jukka']
}
}



-----> 

render: function (){
    return(
     
      <div id="joku">
        <p>otsikko</p>
          <ul>
            <li>{this.state.todos[2]}</li>
          </ul>
	<listComponent esimObjekti={this.state.esimObjekti} <---------t‰ss‰ passataan nested componentille dataa
      </div>


    );
  }
});


****STATEN MUUTTAMINEN*****

Staten muuttaminen. Esimerkiss‰ muuutetaan otsikko 3 sekunnin p‰‰st‰ eri otsikoksi

getInitialState: function (){
  return {
    customerinfo: ['Nimi: ', 'Puhelinnumero: ', 'S‰hkˆposti: ', 'Ajankohta: '],
    booking: ['Ajanvaraus']

  }
},


  render: function (){

      var otsikonMuutos = setTimeout(function(){
        this.setState({
          booking: ['Otsikon muutos']
        });
      }.bind(this),3000);



    return(

      <div>

            <form className="customer-info">
            <h2 className="booking-title">{this.state.booking[0]}</h2>


***** VIRTUAL DOM *****

Virtual DOM nopeuttaa Reactin toimintaa. Virtual DOM katsoo esim staten muutokset ja vertaa niit‰ DOMiin, kun se lˆyt‰‰ 
muutoksen Virtual DOMin ja "oikean" DOMin v‰lill‰ se muuttaa ainoastaan sen rivin, eik‰ muita rivej‰. 
Eli ei tee kaikki rivej‰ uudestaan kun muutos tapahtuu.



*********Cycling Through Data********

Map functiota k‰ytet‰‰n jolla voidaan luoda esim pitk‰ lista ilman ett‰ joutuu kirjoittamaan jokaisen listan osan

    var customerinfo = this.state.customerinfo;
    customerinfo = customerinfo.map(function(item, index){
          return (
            <li>{item}</li>
          )
    });

    return(

      <div>
            <ul>{customerinfo}</ul>




*********Nesting Components********

Componentin sis‰lle voi tehd‰ toisia componentteja.

  render: function (){

    var customerinfo = this.state.customerinfo;
    customerinfo = customerinfo.map(function(item, index){
          return (
            <NestedComponent item={item} key={index}/>
          )
    });

    return(

      <div>
            <ul>{customerinfo}</ul>....





//create NestedComponent
var NestedComponent = React.createClass({
  render: function(){
    return (

        <li>
          <div className="nested-component-item">
              <span className="item-name">{this.props.item}</span>
          </div>
        </li>


    );
  }
})





/********** j‰rjestys jos haluaa uuden "sivun" ***********/


1. 
lis‰‰ uuteen componenttiin
import{Link} from 'react-router';

2. 
lis‰‰ p‰‰ komponenttiin,eli index.js
var ComponentinNimi = require('./componentinpolku')

app componenttiin lis‰t‰‰n reitti, eli esim. 

<Router history={browserHistory}>
         
          <Route path={'/app/componentinpolku'} component={ComponentinPolku}></Route>
</Router>
	

3. lis‰‰ linkki siihen componenttiin mist‰ haluat ment‰v‰n uuteen componenttiin

	<Link to={'/app/componentinpolku'}><p>linkki</p></Link>





/********** SASS k‰yntiin ***********/


D:\massage-page\src\app\sass>sass style.scss style.css






<label htmlFor="email">S‰hkˆposti:</label>
          <input id="email"type="email" />
        <label htmlFor="phone">Puhelinnumero:</label>
          <input id="phone" type="tel" />




<Link to={'/app/appointmentConfirmation'}><input className="primary-button" type="submit" value="Jatka"/></Link>


var React = require('React');
var ReactDOM = require('react-dom');

import{Link} from 'react-router';


var PointmentStepOne = React.createClass({
  halfHourOnClick: function(){
      this.showElement();
      this.halfHour();
   },
  render: function(){

    return (
      <div>
        <div className="appointment-container">
          <h2>VALITSE HIERONTA</h2>
          <ul>
            <li onClick={this.halfHourOnClick}><p>Hieronta 30min</p><p>30Ä</p></li>
            <li><p>Hieronta 45min</p><p>40Ä</p></li>
            <li><p>Hieronta 60min</p><p>45Ä</p></li>
            <li><p>Hieronta 90min</p><p>55Ä</p></li>
          </ul>
        </div>
      </div>
    );
  },
showElement: function(){
  this.props.newState(true);
},
halfHour: function(){
  this.props.treatment('30min');
}

});


module.exports = PointmentStepOne;




****************** appointment js

var React = require('react');

var ReactDOM = require('react-dom');

import{Link} from 'react-router';

var NavComponent = require('./nav')
var AppointmentTime = require('./appointmentTime')
var AppointmentHeaderComponent = require('./appointmentHeader')
var AppointmentSelectDay = require('./appointmentSelectDay')
var FooterComponent = require('./footer')

var Appointment = React.createClass({
  getInitialState: function() {

         return {
            customerInfo: [],
            showComponentSelectDay: false,
            showComponentTime: true


          };


     },


  render: function(){

    return (
      <div>
        <NavComponent />
        <AppointmentHeaderComponent />
        { this.state.showComponentTime ? <AppointmentTime newState={this.newState} treatment={this.treatment} /> : null}
        { this.state.showComponentSelectDay ? <AppointmentSelectDay /> : null}
        <FooterComponent />
      </div>
    );

  },
treatment: function(time){
  var updatedCustomerInfo = this.state.customerInfo;
  updatedCustomerInfo.push(time);
  console.log('kutsu testi2');
  this.setState({
    customerInfo: updatedCustomerInfo
  })
    console.log(updatedCustomerInfo);
},



  newState: function(newstate) {
      this.setState({
        showComponentSelectDay:newstate,
        showComponentTime:false,
      })
  },

});


module.exports = Appointment;




  name: function(name){
    var updatedCustomerInfo = this.state.customerInfo;
    updatedCustomerInfo.push(name);
    this.setState({
      customerInfo: updatedCustomerInfo
    })
  },


var clear = this.state;


document.getElementById("customerName").innerHTML = "Hello World";


document.getElementById("customerName").innerHTML = this.state.customerInfo;




  insertCustomerInfo: function(){
      alert(this.state.customerInfo)
      var timeTest = setTimeout(function () {
        document.getElementById("customerName").innerHTML = this.state.customerInfo;
      }.bind(this), 1000);

  }